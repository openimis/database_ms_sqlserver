name: Automated CI testing
# This workflow run automatically for every commit on github it checks the syntax and launch the tests.
# | grep . | uniq -c filters out empty lines and then groups consecutive lines together with the number of occurrences
on:
  pull_request:
  workflow_dispatch:
    inputs:
      comment:
        description: Just a simple comment to know the purpose of the manual build
        required: false

jobs:
  run_test:
    runs-on: ubuntu-20.04
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: GitHub999
        ports:
          - 1433:1433
        # needed because the mssql container does not provide a health check
        options: --health-interval=10s --health-timeout=3s --health-start-period=10s --health-retries=10 --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD} -Q 'SELECT 1' || exit 1"

    steps:
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: copy current branch
        uses: actions/checkout@v2
        with:
          path: './new'
      - name: generate new files
        working-directory: ./new
        run: bash concatenate_files.sh
      - name: install linux packages
        run: |
            mkdir ./oldMain 
            git clone --depth 1 --branch main https://github.com/openimis/database_ms_sqlserver ./oldMain
            cd oldMain
            bash concatenate_files.sh
            cd ..
            mkdir ./1.42
            wget https://raw.githubusercontent.com/openimis/database_ms_sqlserver/v1.4.2/Empty%20databases/openIMIS_ONLINE.sql -O 1.42/openIMIS_ONLINE.sql        
            curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
            curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
            sudo apt-get update
            sudo ACCEPT_EULA=Y apt-get install -y  mssql-tools build-essential dialog apt-utils unixodbc-dev jq -y
            python -m pip install --upgrade pip
      - name: DB migration 1.4.2
        run: |
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -Q 'DROP DATABASE IF EXISTS imis_1_4_2'
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -Q 'CREATE DATABASE imis_1_4_2'
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -d imis_1_4_2 -i 1.42/openIMIS_ONLINE.sql | grep . | uniq -c
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -d imis_1_4_2 -i "new/output/fullMigrationScipt.sql" | grep . | uniq -c           
        env:
            SA_PASSWORD: GitHub999
            ACCEPT_EULA: Y
      - name: Initialize DB latest
        run: |
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -Q 'DROP DATABASE IF EXISTS imis'
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -Q 'CREATE DATABASE imis'
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -d imis -i "new/output/fullDemoDatabase.sql" | grep . | uniq -c


        env:
          SA_PASSWORD: GitHub999
          ACCEPT_EULA: Y
      - name: DB migration prev main
        run: |
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -Q 'DROP DATABASE IF EXISTS imis_main'
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -Q 'CREATE DATABASE imis_main'
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -d imis_main -i "oldMain/output/fullDemoDatabase.sql" | grep . | uniq -cc
            /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U SA -P $SA_PASSWORD -d imis_main -i "new/output/fullMigrationScipt.sql" | grep . | uniq -c


        env:
            SA_PASSWORD: GitHub999
            ACCEPT_EULA: Y
      - name: pull openimis backend
        run: |
              rm ./openimis -rf
              git clone --depth 1 --branch develop https://github.com/openimis/openimis-be_py.git ./openimis
      - name: Install openIMIS Python dependencies
        working-directory: ./openimis
        run: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              python modules-requirements.py openimis.json > modules-requirements.txt
              cat modules-requirements.txt
              pip install -r modules-requirements.txt      
      - name: Django tests latest
        working-directory: ./openimis
        run: |
              python -V
              ls -l
              cd openIMIS
              mkdir staticfiles
              python manage.py migrate
              python init_test_db.py | grep . | uniq -c
              python manage.py test --keepdb $(jq   -r '(.modules[]|.name)' ../openimis.json)
        env:
              SECRET_KEY: secret
              DEBUG: true
              #DJANGO_SETTINGS_MODULE: hat.settings
              DB_HOST: localhost
              DB_PORT: 1433
              DB_NAME: imis
              DB_USER: sa
              DB_PASSWORD: GitHub999
              #DEV_SERVER: true
              SITE_ROOT: api
      - name: Django tests 1.4.2
        working-directory: ./openimis
        run: |
            python -V
            ls -l
            cd openIMIS
            python manage.py migrate
            python init_test_db.py | grep . | uniq -c
            python manage.py test --keepdb $(jq   -r '(.modules[]|.name)' ../openimis.json)
        env:
            SECRET_KEY: secret
            DEBUG: true
            #DJANGO_SETTINGS_MODULE: hat.settings
            DB_HOST: localhost
            DB_PORT: 1433
            DB_NAME: imis_1_4_2
            DB_USER: sa
            DB_PASSWORD: GitHub999
            #DEV_SERVER: true
            SITE_ROOT: api
      - name: Django tests last main
        working-directory: ./openimis
        run: |
            python -V
            ls -l
            cd openIMIS
            python manage.py migrate
            python init_test_db.py | grep . | uniq -c
            python manage.py test --keepdb $(jq   -r '(.modules[]|.name)' ../openimis.json)
        env:
            SECRET_KEY: secret
            DEBUG: true
            #DJANGO_SETTINGS_MODULE: hat.settings
            DB_HOST: localhost
            DB_PORT: 1433
            DB_NAME: imis_main
            DB_USER: sa
            DB_PASSWORD: GitHub999
            #DEV_SERVER: true
            SITE_ROOT: api
